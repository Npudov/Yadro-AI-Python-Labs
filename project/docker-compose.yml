version: '3.8'

services:
  web1:
    build:
      context: ./src
    volumes:
      - ./src:/src  # Монтируем исходный код для разработки
    environment:
      SERVER_ID: SERVER-1
    networks:
      - app_network
    depends_on:
      postgres-database:
        condition: service_healthy

  web2:
    build:
      context: ./src
    volumes:
      - ./src:/src
    environment:
      SERVER_ID: SERVER-2
    networks:
      - app_network
    depends_on:
      postgres-database:
        condition: service_healthy

  nginx:
    image: nginx:latest
    ports:
      - "80:80"  # Пробрасываем порт 80 с хоста на контейнер
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf  # Монтируем конфиг Nginx
    depends_on:
      - web1
      - web2
    networks:
      - app_network


  postgres-database:
    image: postgres:16
    container_name: postgres
    environment:
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app_network

  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    networks:
      - app_network

volumes:
  db_data: { }

networks:
  app_network:
    driver: bridge